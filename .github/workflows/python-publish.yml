name: Python package

on:
  push:
    branches:
      - feat/ci
    tags:
      - "v*"

jobs:
  build:
    ## ubuntu-latest
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        python-version: ["3.11"]
        ## , macOS-latest, windows-latest
        os: [ubuntu-latest]

    steps:
      ## Checkout repo
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      ## Install PDM in the pipeline
      - uses: pdm-project/setup-pdm@v3
        name: Setup PDM
        with:
          # Version range or exact version of a Python version to use, the same as actions/setup-python
          python-version: ${{ matrix.python-version }}
          cache: true
          # https://github.com/marketplace/actions/setup-pdm#caches
          cache-dependency-path: |
            ./pdm.lock
          # The target architecture (x86, x64) of the Python interpreter. the same as actions/setup-python
          architecture: x64
          # The version of PDM to install. Leave it as empty to use the latest version from PyPI, or 'head' to use the latest version from GitHub
          # version:
          # Allow prerelease versions of PDM to be installed
          prerelease: false
          # Enable PEP 582 package loading globally
          enable-pep582: false
          # Allow prerelease versions of Python to be installed. For example if only 3.12-dev is available, 3.12 will fallback to 3.12-dev
          allow-python-prereleases: false

      # ## Check if version is greater than version on pypi
      # - name: Load version from pyproject.toml
      #   uses: maybe-hello-world/pyproject-check-version@v3
      #   id: versioncheck
      #   with:
      #     pyproject-path: "./pyproject.toml"
      # ## Check if version is greater than version on pypi
      # - name: check output
      #   run: |
      #     echo "Output: ${{ steps.versioncheck.outputs.local_version_is_higher }}"  # 'true' or 'false
      #     echo "Local version: ${{ steps.versioncheck.outputs.local_version }}"     # e.g., 0.1.1
      #     echo "Public version: ${{ steps.versioncheck.outputs.public_version }}"   # e.g., 0.1.0

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install dependencies
        run: pdm sync

      - name: Lint with Ruff
        ## Custom script in pyproject.toml
        run: pdm run format

  release:
    needs: build
    # if: ${{ github.event_name == 'push' && github.ref == 'refs/head/feat/ci' }}

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        python-version: ["3.11"]
        ## , macOS-latest, windows-latest
        os: [ubuntu-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      ## Install PDM in the pipeline
      - uses: pdm-project/setup-pdm@v3
        name: Setup PDM
        with:
          # Version range or exact version of a Python version to use, the same as actions/setup-python
          python-version: ${{ matrix.python-version }}
          cache: true
          # https://github.com/marketplace/actions/setup-pdm#caches
          cache-dependency-path: |
            ./pdm.lock
          # The target architecture (x86, x64) of the Python interpreter. the same as actions/setup-python
          architecture: x64
          # The version of PDM to install. Leave it as empty to use the latest version from PyPI, or 'head' to use the latest version from GitHub
          # version:
          # Allow prerelease versions of PDM to be installed
          prerelease: false
          # Enable PEP 582 package loading globally
          enable-pep582: false
          # Allow prerelease versions of Python to be installed. For example if only 3.12-dev is available, 3.12 will fallback to 3.12-dev
          allow-python-prereleases: false

      - name: Prepare package for release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config user.name ${{ secrets.GIT_USERNAME }}
          git config user.email ${{ secrets.GIT_EMAIL }}

      - name: Build release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config user.name ${{ secrets.GIT_USERNAME }}
          git config user.email ${{ secrets.GIT_EMAIL }}
          pdm run semantic-release publish
        ## Build sdist at /home/runner/work/red-utils/red-utils/dist/red_utils-x.x.x.tar.gz
        ## Build wheel at /home/runner/work/red-utils/red-utils/dist/red_utils-x.x.x-py3-none-any.whl
        # run: pdm build

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

      # - name: Release from artifact
      #   uses: ncipollo/release-action@v1
      #   with:
      #     artifacts: "dist/red_utils-*.tar.gz"

      # - name: Tag commit
      #   uses: tvdias/github-tagger@v0.0.1
      #   with:
      #     repo-token: "${{ secrets.GH_TOKEN }}"
      #     tag: v${{ steps.version.outputs.stdout }}
